# .github/workflows/sync-and-merge.yml
name: Sync Upstream & Merge

on:
  workflow_dispatch:
    inputs:
      upstream_repo:
        description: '上游仓库 (owner/repo)'
        required: true
        default: 'GregTech-Odyssey/GregTech-Odyssey'
      sync_branch:
        description: '同步目标分支'
        required: true
        default: 'sync'
  schedule:
    - cron: '*/30 * * * *'

permissions:
  contents: write
  issues: write
  pull-requests: write
  statuses: write

env:
  UPSTREAM_REPO: ${{ github.event.inputs.upstream_repo || 'GregTech-Odyssey/GregTech-Odyssey' }}
  SYNC_BRANCH: ${{ github.event.inputs.sync_branch || 'sync' }}

jobs:
  sync-and-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          persist-credentials: false
          fetch-depth: 0

      - name: Configure Git credentials
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git

      - name: Fetch upstream changes
        run: git fetch upstream

      - name: Checkout/Create sync branch
        run: |
          git checkout -B ${{ env.SYNC_BRANCH }} upstream/main

      - name: Check for new commits
        id: check_commits
        run: |
          if [ "$(git rev-parse upstream/main)" = "$(git rev-parse HEAD)" ]; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit if no changes
        if: steps.check_commits.outputs.no_changes == 'true'
        run: echo "No new commits to sync; exiting." && exit 0

      - name: Force push sync branch
        run: git push origin ${{ env.SYNC_BRANCH }} --force

      - name: Check for existing conflict branches
        id: check_conflict_branches
        run: |
          # 检查是否存在冲突分支，并记录第一个找到的分支名
          conflict_branch=$(git ls-remote --heads origin "conflict-fix-*" | awk '{print $2}' | sed 's/refs\/heads\///' | sort | head -n1)
          if [ -n "$conflict_branch" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "branch_name=$conflict_branch" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Force update conflict branch
        if: steps.check_conflict_branches.outputs.branch_exists == 'true'
        run: |
          target_branch="${{ steps.check_conflict_branches.outputs.target_branch }}"
          git checkout -B "${{ steps.check_conflict.outputs.branch_name }}" origin/sync
          git push origin "${{ steps.check_conflict.outputs.branch_name }}" --force

      - name: Attempt merge to main
        id: merge_attempt
        if: steps.check_conflict.outputs.exists == 'false'
        continue-on-error: true
        run: |
          git checkout main
          if git merge --no-ff sync -m "Sync upstream changes"; then
            git push origin main
          else
            git merge --abort
            exit 1
          fi

      - name: Create conflict resolution PR
        if: steps.check_conflict.outputs.exists == 'false' && steps.merge_attempt.outcome == 'failure'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          conflict_branch="conflict-fix-${{ github.run_id }}"
          git checkout -b $conflict_branch origin/sync
          git push origin $conflict_branch
          curl -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "{
              \"title\": \"需要解决合并冲突： sync → main\",
              \"body\": \"\",
              \"head\": \"$conflict_branch\",
              \"base\": \"main\"
            }"
